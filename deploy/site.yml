- name: "Install environment"
  tags: setup
  sudo: yes
  hosts: production
  tasks:
    - name: "Erlang solutions key"
      apt_key: url="http://packages.erlang-solutions.com/ubuntu/erlang_solutions.asc"
    - name: "Erlang solutions repo"
      apt_repository: repo="deb http://packages.erlang-solutions.com/ubuntu trusty contrib"
    - name: "Install elixir"
      apt: name=elixir update_cache=yes
    - name: "Install postgres"
      apt: name=postgresql
    - name: "Set simple password :o"
      shell: sudo -u postgres psql -U postgres -d postgres -c "CREATE ROLE root SUPERUSER LOGIN PASSWORD 'qwerty';"
      failed_when: False
    - name: "Install git"
      apt: name=git-core
    - name: "Install nginx"
      tags:
        - setup
        - nginx
      apt: name=nginx
    - name: "Configure nginx"
      tags:
        - setup
        - nginx
      copy: src=files/nginx.conf dest=/etc/nginx/sites-available/default
    - name: "Reload nginx"
      tags:
        - setup
        - nginx
      shell: "service nginx reload"
- name: "Build frontend"
  hosts: local
  tags:
    - deploy
    - frontend
  tasks:
    - name: "Build everything"
      shell: ember build --environment production --output-path tmp/production-dist
      args:
        chdir: ../web
- name: "Deploy"
  tags: deploy
  hosts: production
  vars:
    mix_env:
      MIX_ENV: prod
      PORT: 5000
  tasks:
    - name: "Get code"
      git: repo=git://github.com/sevos/crm-phoenix-ember.git dest=/build accept_hostkey=True force=yes
    - name: "Install hex"
      shell: echo "Y" | mix local.hex
      args:
        chdir: /build/app
    - name: "Install rebar"
      shell: echo "Y" | mix local.rebar
      args:
        chdir: /build/app
    - name: "Read current version"
      shell: git log --pretty=oneline --abbrev-commit | wc -l
      register: version
      args:
        chdir: /build
    - name: "Set current version"
      set_fact:
        app_version: "0.2.{{ version.stdout }}"
    - name: "Write current version"
      lineinfile:
        dest: /build/app/mix.exs
        regexp: 'version:'
        line: '    version: "{{ app_version }}",'
    - name: "Build"
      shell: mix do deps.get, compile, release
      args:
        chdir: /build/app
      environment: mix_env
    - name: "Create release directory"
      file: path=/app state=directory
    - name: "Create frontend release directory"
      file: path=/app/web state=directory
    - name: "Test if app is already running"
      shell: /app/bin/crm ping
      failed_when: False
      register: ping
    - name: "Create initial release"
      unarchive: src=/build/app/rel/crm/crm-{{ app_version }}.tar.gz dest=/app copy=no
      when: not "pong" in ping.stdout
    - name: "Stop for DB maintainence"
      tags:
        - deploy
        - db
      shell: /app/bin/crm stop
      when: '"pong" in ping.stdout'
    - name: "Create database"
      tags:
        - deploy
        - db
      shell: mix ecto.create
      args:
        chdir: /build/app
      environment: mix_env
    - name: "Migrate database"
      tags:
        - deploy
        - db
      shell: mix ecto.migrate
      args:
        chdir: /build/app
      environment: mix_env
    - name: "Test if app is already running"
      shell: /app/bin/crm ping
      failed_when: False
      register: ping2
    - name: "Start the app"
      shell: /app/bin/crm start
      when: not "pong" in ping2.stdout
      environment: mix_env
    - name: "Prepare release"
      shell: "mkdir -p /app/releases/{{ app_version }}; mv /build/app/rel/crm/crm-{{ app_version }}.tar.gz /app/releases/{{ app_version }}/crm.tar.gz"
    - name: "Upload frontend assets"
      tags:
        - deploy
        - frontend
      synchronize: src=../web/tmp/production-dist/ dest=/app/web/
    - name: "Upgrade app"
      shell: /app/bin/crm upgrade "{{ app_version }}"
